一、一些基本概念
CSS布局的两种基本单位：
1.block-level box
display属性为block,list-item,table的元素，会生成block-level box，并且参与block fromatting context。
2.inline-level box
display属性为inline,inline-block,inline-table的元素，会生成inline-level box,并且参与inline formatting context。

那么formatting context又是啥呢？
formatting context是W3C CSS2.1规范中的一个概念，它是页面中的一块渲染区域，并且有一套渲染规则，它决定了子元素将如何定位，以及和其他元素的关系和相互
作用。也就是说formatting context提供了一个环境，使得HTML元素在这个环境中按照特定的规则进行布局。
常见的formatting context有：
Block formatting context
Inline formatting context
GridLayout formatting context
Flex formatting context

BFC的全拼是Block Formatting Context,它是一个独立的渲染区域，只有block-level box参与，其中的元素按照规定的渲染规则进行布局，并且，这个区域与外部毫不
相干，这一点很重要。

二、BFC的布局规则与触发条件
BFC的主要布局规则有：
1.内部的元素会在垂直方向一个接一个放置；
2.元素垂直方向的距离由margin决定，属于同一个BFC的两个相邻元素的margin会发生重叠；
3.每个元素的左外边距与包含元素的左边界相接触，即使存在浮动也是如此；
4.BFC的区域不会与float元素重叠；
5.计算BFC的高度时，浮动元素也参与计算；
6.BFC就是页面上一个隔离的独立的容器，容器里面的元素不会影响到外面的元素，反之亦然

CSS2.1规定，满足下列CSS声明的元素会生成BFC(也就是BFC的触发规则)：
1.根元素(HTML)
2.float值不为none
3.overflow值不为visible
4.position的值为absolute或者fixed
5.display的值为inline-block,table-cell,table-caption,flex,inline-flex,table

三、BFC的一些应用实例

1.防止垂直margin重叠
我们都知道margin collapse,也就是相邻的垂直元素同时设置了margin之后，margin值会塌陷到其中较大的那个值，这就是margin值的合并。其根本原因就是他们处于
同一个BFC中，因为“属于同一个BFC的两个相邻元素的margin会发生重叠”。
解决方案是，我们可以在其中的一个元素外层包裹一个容器，并触发这个容器生成一个BFC。那么相邻的这两个元素就不会发生margin重叠了，因为此时他们分属于不同的
BFC。
HTML代码如下：
<body>
  <p class="alone">我属于一个单独的BFC</p>
  <div id="wrap">
    <p>我属于another BFC</p>
  </div>
</body>

CSS代码如下：
#wrap{
	overflow: hidden;     //触发包裹容器生成BFC
}
p{
	width: 200px;
	line-height: 100px;
	margin: 100px;
	text-align: center;
	background: #000;
	color: #fff;
}


2.防止容器内部有浮动元素而发生高度坍塌
在一个高度需要子元素撑开的容器中，如果子元素有浮动属性，则会发生父容器的高度坍塌，我们常常在父容器上加上overflow:hidden;来处理这一问题，这种方式的
本质就是触发父容器的BFC，因为“计算BFC的高度时，浮动元素也参与计算”。示例如下。

HTML代码如下：
<div id="wrap">
	<div class="child">float:left child111</div>
	<div class="child">float:left child222</div>
</div>

CSS代码如下：
#wrap{
	width: 600px;
	border: 2px solid black;
	overflow: hidden;         //触发了父容器的BFC之后，内部的浮动元素高度被计算
}
.child{
	float: left;
	width: 100px;
	height: 160px;
	border: 5px solid orange;
	color: #f00;
}


3.防止文字或其它元素环绕

HTML代码如下：
<div id="wrap">
	<div class="child">float:left child111</div>
	<div class="text">
	我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文
	字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是
	很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字,我是很多文字我是很多文字我是很多文字我是很多文字，我是很多文字我是很多
	文字我是很多文字我是很多文字我是很多文字,我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字,我是很多文字我
	是很多文字我是很多文字我是很多文字我是很多文字我是很多文字,我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字,我是很多
	文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是
	很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字我是很多文字,我是很多文字我是很多文字我是很多文字我是很多文
	字我是很多文字我是很多文字我是很多文字
	</div>
</div>

CSS代码如下：
#wrap{
	width: 300px;
	border: 2px solid black;
}
.child{
	float: left;
	width: 100px;
	height: 100px;
	border: 3px solid orange;
	color: #f00;
}
.text{
	overflow: hidden;		//触发该元素的BFC
	border: 2px solid green;
}

正常情况下如果一个块级元素设置成了float，那么它的兄弟元素会环绕其布局。
因为触发了.text的BFC，而.child本身是一个BFC，两个BFC是不会发生重叠的，因为他们是独立的渲染区域，因此.text内的文字就不会环绕在.child周围了。


4.在多列布局中使用BFC

HTML代码如下：
<div class="container">
	<div class="column">column 1</div>
	<div class="column">column 2</div>
	<div class="column">column 3</div>
</div>

CSS代码如下：
.column {
	float: left;
	width: 31.33%;
	background-color: green;
	margin: 0 1%;
}
.column:last-child {
	float: none;		//清除最后一列元素的浮动
	overflow: hidden;	//并将它设置为BFC
}

如果我们正在创建的一个多列布局占满了整个容器的宽度，在某些浏览器中最后一列有时候将会被挤到下一行。会发生这样可能是因为浏览器舍入（取整）了列的宽度
使得总和的宽度超过了容器的宽度。然而，如果我们在一个列的布局中建立了一个新的BFC，它将会在前一列填充完之后的后面占据所剩余的空间。

